---
title: "Main"
format: html
editor: visual
---

## Libraries

```{r libraries}

install.packages("DBI")
install.packages("readr")
install.packages("RSQLites")
library(readr)
library(DBI)
library(RSQLite)

```

## Load Data

```{r load_datasets}

csrankings <- read_csv("datasets/csrankings.csv")
author_info <- read_csv("datasets/generated-author-info.csv")
acm_fellows <- read_csv("datasets/acm-fellows.csv")
turing_awards <- read.csv("datasets/turing.csv")
geolocation <- read.csv("datasets/geolocation.csv")
country_info <- read.csv("datasets/country-info.csv")
dblp_aliases.csv <- read.csv("datasets/dblp-aliases.csv")
conference_ranking <- read.csv("datasets/conference_ranking.csv")
us_news <- read.csv("datasets/data.csv")
field_conference <- read.csv("datasets/field_conference.csv")

```

## CS Ranking

```{r csrankings}

names(csrankings)[names(csrankings) == "name"] <- "researcher_name"

connection <- RSQLite::dbConnect(SQLite(), "csrankings.db")
# csranking
query <- "
    DROP TABLE IF EXISTS csrankings;
    CREATE TABLE IF NOT EXISTS csrankings (
    researcher_name VARCHAR(255),
    affiliation VARCHAR(255),
    homepage VARCHAR(2048),
    scholarid VARCHAR(16),
    PRIMARY KEY (researcher_name, affiliation)
);"

RSQLite::dbExecute(connection, query)

row_count <- dbGetQuery(connection, "SELECT COUNT(*) AS count FROM csrankings;")
if (row_count$count == 0) {
  # Only load the data if the table is empty
  dbWriteTable(connection, "csrankings", csrankings, append = TRUE, row.names = FALSE)
  message("Data loaded into csrankings table.")
} else {
  message("Table already contains data. Skipping data load.")
}

result <- dbGetQuery(connection, "SELECT * FROM csrankings;")
print(result)

RSQLite::dbDisconnect(connection)
```

\

## Create Database

```{r create_database}
connection <- RSQLite::dbConnect(SQLite(), "csrankings.db")

# csranking
query <- "
CREATE TABLE IF NOT EXISTS csrankings (
    researcher_name VARCHAR(255),
    affiliation VARCHAR(255),
    homepage VARCHAR(2048),
    scholarid VARCHAR(16),
    PRIMARY KEY (researcher_name, affiliation)
);"

RSQLite::dbExecute(connection, query)


# generated_author_info
query <- "
CREATE TABLE IF NOT EXISTS generated_author_info (
    researcher_name VARCHAR(255),
    dept VARCHAR(255),
    area VARCHAR(16),
    count INT,
    adjustedcount DOUBLE,
    publication_year INT,
    PRIMARY KEY (researcher_name),
    FOREIGN KEY (researcher_name) REFERENCES csranking(researcher_name) ON DELETE CASCADE,
    FOREIGN KEY (dept) REFERENCES csranking(affiliation) ON DELETE SET NULL
);"

RSQLite::dbExecute(connection, query)


# acm_fellows
query <- "
CREATE TABLE IF NOT EXISTS acm_fellows (
    researcher_name VARCHAR(255),
    award_year INT,
    PRIMARY KEY (researcher_name, award_year),
    FOREIGN KEY (researcher_name) REFERENCES csrankings(researcher_name) ON DELETE CASCADE
);"

RSQLite::dbExecute(connection, query)


# geolocation
query <- "
CREATE TABLE IF NOT EXISTS  geolocation (
    institution VARCHAR(255),
    latitude DOUBLE,
    longitude DOUBLE,
    PRIMARY KEY (institution),
    FOREIGN KEY (institution) REFERENCES csrankings(affiliation) ON DELETE SET NULL
);"

RSQLite::dbExecute(connection, query)


# country_info
query <- "
CREATE TABLE IF NOT EXISTS country_info (
    institution VARCHAR(255),
    region VARCHAR(255),
    countryabbrv VARCHAR(16),
    PRIMARY KEY (institution),
    FOREIGN KEY (institution) REFERENCES csrankings(affiliation) ON DELETE SET NULL
);
"

RSQLite::dbExecute(connection, query)


# dblp_aliases
query <- "
CREATE TABLE IF NOT EXISTS dblp_aliases (
    alias VARCHAR(255),
    researcher_name VARCHAR(255),
    PRIMARY KEY (researcher_name, alias),
    FOREIGN KEY (researcher_name) REFERENCES csrankings(researcher_name) ON DELETE CASCADE
);
"

RSQLite::dbExecute(connection, query)

RSQLite::dbDisconnect(connection)
```

```{r}
connection <- dbConnect(SQLite(), "csrankings.db")


# conference_ranging
query <- "
CREATE TABLE IF NOT EXISTS conference_ranking (
  acronym VARCHAR(16),
  conference_name VARCHAR(255),
  rank VARCHAR(2),
  PRIMARY KEY (acronym, conference_name),
  FOREIGN KEY (acronym) REFERENCES generated_author_info(acronym)
)
"

RSQLite::dbExecute(connection, query)


# usnews / data
query <- "
CREATE TABLE IF NOT EXISTS data (
  institution_displayName VARCHAR(255),
  institution_schoolType VARCHAR(255),
  institution_aliasNames VARCHAR(255),
  institution_state VARCHAR(255),
  institution_city VARCHAR(255),
  institution_zip INT,
  institution_region VARCHAR(255),
  institution_isPublic BOOL,
  institution_institutionalControl VARCHAR(255),
  institution_primaryPhotoCardThumb TEXT,
  
  
  PRIMARY KEY (institution_displayName)

)
"


```
