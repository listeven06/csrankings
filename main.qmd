---
title: "Main"
format: html
editor: visual
---

## Load Datasets

```{r load_data}
library(readr)

csrankings <- read_csv("datasets/csrankings.csv")
author_info <- read_csv("datasets/generated-author-info.csv")
acm_fellows <- read_csv("datasets/acm-fellows.csv")
turing_awards <- read_csv("datasets/turing.csv")
geolocation <- read_csv("datasets/geolocation.csv")
country_info <- read_csv("datasets/country-info.csv")
dblp_aliases <- read_csv("datasets/dblp-aliases.csv")
conference_rankings <- read_csv("datasets/conference_ranking.csv")
us_news <- read_csv("datasets/data.csv")
field_conference <- read_csv("datasets/field_conference.csv")

head(csrankings)
head(author_info)
head(acm_fellows)
head(turing_awards)
head(geolocation)
head(country_info)
head(dblp_aliases)
head(conference_rankings)
head(us_news)
head(field_conference)
```


## Create and Load Databases

### csrankings

```{r split_name}
library(tidyr)
library(dplyr)

names(csrankings)[names(csrankings) == "name"] <- "researcher_name"

# The regex explained:
#   ^([^\\s]+)       -> Matches the first token (first name) at the start.
#   \\s+             -> One or more spaces.
#   (?:(.*)\\s+)?    -> Optionally matches the middle part (middle name(s)) followed by space.
#   ([^\\s]+)$       -> Matches the last token (last name) at the end.
csrankings <- csrankings %>%
  extract(
    col = researcher_name,
    into = c("first_name", "middle_name", "last_name"),
    regex = "^([^\\s]+)\\s+(?:(.*)\\s+)?([^\\s]+)$",
  )
```

```{r}
acm_fellows <- acm_fellows %>%
  extract(
    col = name,
    into = c("first_name", "middle_name", "last_name"),
    regex = "^([^\\s]+)\\s+(?:(.*)\\s+)?([^\\s]+)$",
  )
```


```{r csrankings}
library(RSQLite)
library(DBI)

connection <- RSQLite::dbConnect(SQLite(), "csrankings.db")
# csranking

drop_check <- "DROP TABLE IF EXISTS csrankings;"

RSQLite::dbExecute(connection, drop_check)

query <- "
    CREATE TABLE IF NOT EXISTS csrankings (
    first_name VARCHAR(225),
    middle_name VARCHAR(225),
    last_name VARCHAR(225),
    affiliation VARCHAR(255),
    homepage VARCHAR(2048),
    scholarid VARCHAR(16),
    PRIMARY KEY (first_name, middle_name, last_name)
);"

RSQLite::dbExecute(connection, query)

row_count <- dbGetQuery(connection, "SELECT COUNT(*) AS count FROM csrankings;")
if (row_count$count == 0) {
  # Only load the data if the table is empty
  dbWriteTable(connection, "csrankings", csrankings, append = TRUE, row.names = FALSE)
  message("Data loaded into csrankings table.")
} else {
  message("Table already contains data. Skipping data load.")
}

result <- dbGetQuery(connection, "SELECT * FROM csrankings;")
print(result)

RSQLite::dbDisconnect(connection)
```

### acm_fellows

```{r preprocess_acm_fellows}
# just a preference
names(acm_fellows)[names(acm_fellows) == "year"] <- "award_year"

colnames(acm_fellows)
```


```{r acm_fellows}
library(RSQLite)

connection <- RSQLite::dbConnect(SQLite(), "csrankings.db")


drop_check <- "DROP TABLE IF EXISTS acm_fellows;"

RSQLite::dbExecute(connection, drop_check)

# acm_fellows
query <- "
CREATE TABLE IF NOT EXISTS acm_fellows (
    first_name VARCHAR(255),
    middle_name VARCHAR(255),
    last_name VARCHAR(255),
    award_year INT,
    PRIMARY KEY (first_name, middle_name, last_name, award_year),
    FOREIGN KEY (first_name) REFERENCES csrankings(first_name) ON DELETE CASCADE,
    FOREIGN KEY (middle_name) REFERENCES csrankings(middle_name) ON DELETE CASCADE,
    FOREIGN KEY (last_name) REFERENCES csrankings(last_name) ON DELETE CASCADE
);"

RSQLite::dbExecute(connection, query)

row_count <- dbGetQuery(connection, "SELECT COUNT(*) AS count FROM acm_fellows;")
if (row_count$count == 0) {
  # Only load the data if the table is empty
  dbWriteTable(connection, "acm_fellows", acm_fellows, append = TRUE, row.names = FALSE)
  message("Data loaded into csrankings table.")
} else {
  message("Table already contains data. Skipping data load.")
}

result <- dbGetQuery(connection, "SELECT * FROM acm_fellows;")
print(result)

RSQLite::dbDisconnect(connection)
```

### country_info

```{r country_info}
library(RSQLite)

connection <- RSQLite::dbConnect(SQLite(), "csrankings.db")


drop_check <- "DROP TABLE IF EXISTS country_info;"

RSQLite::dbExecute(connection, drop_check)


# country_info
query <- "
CREATE TABLE IF NOT EXISTS country_info (
    institution VARCHAR(255),
    region VARCHAR(255),
    countryabbrv VARCHAR(16),
    PRIMARY KEY (institution),
    FOREIGN KEY (institution) REFERENCES csrankings(affiliation) ON DELETE SET NULL
);
"

RSQLite::dbExecute(connection, query)

row_count <- dbGetQuery(connection, "SELECT COUNT(*) AS count FROM country_info;")
if (row_count$count == 0) {
  # Only load the data if the table is empty
  dbWriteTable(connection, "country_info", country_info, append = TRUE, row.names = FALSE)
  message("Data loaded into csrankings table.")
} else {
  message("Table already contains data. Skipping data load.")
}

result <- dbGetQuery(connection, "SELECT * FROM country_info;")
print(result)

RSQLite::dbDisconnect(connection)
```


### conference_ranking

For the conference ranking (conference_ranking.csv) file, when you create a corresponding table, in addition to the three attributes for abbreviation, full name, rating, also include another attribute for “academic society” whose value can be ‘ACM’, ‘IEEE’, ‘ACM+IEEE’, or ‘other’. You will need to scrape this information from the conference full name. E.g., if a conference is titled “ACM conference on Machine Learning” since ACM appears in the title, we will the value ‘ACM’ for the “academic society”. Likewise, a conference such as “IEEE conference on Big Data” will be marked as an ‘IEEE’ conference. If neither IEEE nor ACM appear, then we will assign the value of ‘other’ to the field, while if both IEEE and ACM appear, we will assign the value ‘ACM+IEEE’.

```{r preprocess_conference_rankings}
colnames(conference_rankings)

names(conference_rankings)[names(conference_rankings) == "Antonym"] <- "acronym"
names(conference_rankings)[names(conference_rankings) == "Name"] <- "conference_name"
names(conference_rankings)[names(conference_rankings) == "Rank"] <- "rank"

colnames(conference_rankings)
head(conference_rankings)
```


```{r conference_ranking}
library(RSQLite)
library(DBI)

connection <- RSQLite::dbConnect(SQLite(), "csrankings.db")


drop_check <- "DROP TABLE IF EXISTS conference_rankings;"

RSQLite::dbExecute(connection, drop_check)

# conference_ranking
query <- "
CREATE TABLE IF NOT EXISTS conference_rankings (
  acronym VARCHAR(16),
  conference_name VARCHAR(255),
  rank VARCHAR(2),
  academic_society VARCHAR(8),
  PRIMARY KEY (acronym, conference_name),
  FOREIGN KEY (acronym) REFERENCES generated_author_info(acronym)
);
"

RSQLite::dbExecute(connection, query)


row_count <- dbGetQuery(connection, "SELECT COUNT(*) AS count FROM conference_rankings;")
if (row_count$count == 0) {
  # Only load the data if the table is empty
  dbWriteTable(connection, "conference_rankings", conference_rankings, append = TRUE, row.names = FALSE)
  message("Data loaded into conference_rankings table.")
} else {
  message("Table already contains data. Skipping data load.")
}

result <- dbGetQuery(connection, "SELECT * FROM conference_rankings;")
print(result)

# Scrape academic_society column

query <- "
UPDATE conference_rankings
SET academic_society = CASE
    WHEN (conference_name LIKE '%ACM%' AND conference_name LIKE '%IEEE%') THEN 'ACM+IEEE'
    WHEN conference_name LIKE 'ACM%' THEN 'ACM'
    WHEN conference_name LIKE 'IEEE%' THEN 'IEEE'
    ELSE 'other'
END;
"

RSQLite::dbExecute(connection, query)

result <- dbGetQuery(connection, "SELECT * FROM conference_rankings;")
print(result)


RSQLite::dbDisconnect(connection)

```




## Create Database

```{r create_database}
library(RSQLite)

connection <- RSQLite::dbConnect(SQLite(), "csrankings.db")


# generated_author_info
query <- "
CREATE TABLE IF NOT EXISTS generated_author_info (
    researcher_name VARCHAR(255),
    dept VARCHAR(255),
    area VARCHAR(16),
    count INT,
    adjustedcount DOUBLE,
    publication_year INT,
    PRIMARY KEY (researcher_name),
    FOREIGN KEY (researcher_name) REFERENCES csranking(researcher_name) ON DELETE CASCADE,
    FOREIGN KEY (dept) REFERENCES csranking(affiliation) ON DELETE SET NULL
);"

RSQLite::dbExecute(connection, query)


# geolocation
query <- "
CREATE TABLE IF NOT EXISTS  geolocation (
    institution VARCHAR(255),
    latitude DOUBLE,
    longitude DOUBLE,
    PRIMARY KEY (institution),
    FOREIGN KEY (institution) REFERENCES csrankings(affiliation) ON DELETE SET NULL
);"

RSQLite::dbExecute(connection, query)


# country_info
query <- "
CREATE TABLE IF NOT EXISTS country_info (
    institution VARCHAR(255),
    region VARCHAR(255),
    countryabbrv VARCHAR(16),
    PRIMARY KEY (institution),
    FOREIGN KEY (institution) REFERENCES csrankings(affiliation) ON DELETE SET NULL
);
"

RSQLite::dbExecute(connection, query)


# dblp_aliases
query <- "
CREATE TABLE IF NOT EXISTS dblp_aliases (
    alias VARCHAR(255),
    researcher_name VARCHAR(255),
    PRIMARY KEY (researcher_name, alias),
    FOREIGN KEY (researcher_name) REFERENCES csrankings(researcher_name) ON DELETE CASCADE
);
"

RSQLite::dbExecute(connection, query)

RSQLite::dbDisconnect(connection)
```

```{r create_database2}
connection <- dbConnect(SQLite(), "csrankings.db")


# conference_ranking
query <- "
CREATE TABLE IF NOT EXISTS conference_ranking (
  acronym VARCHAR(16),
  conference_name VARCHAR(255),
  rank VARCHAR(2),
  PRIMARY KEY (acronym, conference_name),
  FOREIGN KEY (acronym) REFERENCES generated_author_info(acronym)
)
"

RSQLite::dbExecute(connection, query)


# usnews / data
query <- "
CREATE TABLE IF NOT EXISTS data (
  institution_displayName VARCHAR(255),
  institution_schoolType VARCHAR(255),
  institution_aliasNames VARCHAR(255),
  institution_state VARCHAR(50),
  institution_city VARCHAR(255),
  institution_zip INT,
  institution_region VARCHAR(50),
  institution_isPublic BOOLEAN,
  institution_institutionalControl VARCHAR(255),
  institution_primaryPhotoCardThumb TEXT,
  ranking_displayRank VARCHAR(255),
  ranking_sortRank INT,
  searchData_actAvg_rawValue FLOAT,
  searchData_percentReceivingAid_rawValue FLOAT,
  searchData_acceptanceRate_rawValue FLOAT,
  searchData_tuition_rawValue FLOAT,
  searchData_hsGpaAvg_rawValue FLOAT,
  searchData_engineeringRepScore_rawValue TEXT,
  searchData_parentRank_rawValue TEXT,
  searchData_enrollment_rawValue INT,
  searchData_businessRepScore_rawValue TEXT,
  searchData_satAvg_rawValue TEXT,
  searchData_costAfterAid_rawValue FLOAT,
  searchData_testAvgs_displayValue_0_value VARCHAR(255),
  searchData_testAvgs_displayValue_1_value VARCHAR(255),
  PRIMARY KEY (institution_displayName)
);
"

RSQLite::dbExecute(connection, query)

query <- "
CREATE TABLE IF NOT EXISTS field_conference (
  major VARCHAR(255),
  field VARCHAR(255),
  conference VARCHAR(255),
  PRIMARY KEY (conference, field)
)
"
```




